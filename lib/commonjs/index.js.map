{"version":3,"sources":["index.tsx"],"names":["SharedPreferences","NativeModules","isFloat","n","Number","SharedPreferencesImpl","setBool","key","value","setFloat","Error","Platform","OS","toString","setInt","isInteger","setString","setJSON","JSON","stringify","synchronize","getBool","getFloat","parseFloat","getInt","getString","defaultValue","getJSON","parse","getKeys","getAll","sharedPreferences"],"mappings":"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","sourcesContent":["import {NativeModules, Platform} from 'react-native'\n\ninterface SharedPreferencesType {\n  setInt(key: string, value: number): void\n  setString(key: string, value: string): void\n  setJSON(key: string, value: object): void\n  setFloat(key: string, value: number): void\n  setBool(key: string, value: boolean): void\n  synchronize(): void\n\n  getInt(key: string): Promise<number>\n  getString(key: string, defaultValue: string): Promise<string>\n  getJSON(key: string, defaultValue: object): Promise<object>\n  getFloat(key: string): Promise<number>\n  getBool(key: string): Promise<boolean>\n  getKeys(): Promise<Array<string>>\n  getAll(defaultValue: object): Promise<any>\n}\n\nconst {SharedPreferences} = NativeModules\n\nconst isFloat = (n: any) => {\n  return Number(n) === n && n % 1 !== 0\n}\n\nclass SharedPreferencesImpl implements SharedPreferencesType {\n  setBool(key: string, value: boolean): void {\n    SharedPreferences.setBool(key, value)\n  }\n\n  setFloat(key: string, value: number): void {\n    if (value !== 0 && !isFloat(value))\n      throw new Error(`Passed value: ${value} is not double type`)\n    if (Platform.OS === 'android') {\n      SharedPreferences.setFloat(key, value.toString())\n      return\n    }\n    SharedPreferences.setFloat(key, value)\n  }\n\n  setInt(key: string, value: number): void {\n    if (!Number.isInteger(value))\n      throw new Error(`Passed value: ${value} is not integer type`)\n    SharedPreferences.setInt(key, value)\n  }\n\n  setString(key: string, value: string): void {\n    SharedPreferences.setString(key, value)\n  }\n\n  setJSON(key: string, value: object) {\n    SharedPreferences.setString(key, JSON.stringify(value))\n  }\n\n  synchronize() {\n    SharedPreferences.synchronize()\n  }\n\n  getBool(key: string): Promise<boolean> {\n    return SharedPreferences.getBool(key)\n  }\n\n  async getFloat(key: string): Promise<number> {\n    if (Platform.OS === 'android') {\n      return parseFloat(await SharedPreferences.getFloat(key))\n    }\n    return SharedPreferences.getFloat(key)\n  }\n\n  getInt(key: string): Promise<number> {\n    return SharedPreferences.getInt(key)\n  }\n\n  async getString(key: string, defaultValue: string): Promise<string> {\n    const value = await SharedPreferences.getString(key)\n    if (!value) return defaultValue\n    return value\n  }\n\n  async getJSON(key: string, defaultValue: object): Promise<object> {\n    const value = await SharedPreferences.getString(key)\n    if (!value) return defaultValue\n    return JSON.parse(value)\n  }\n\n  getKeys(): Promise<Array<string>> {\n    return SharedPreferences.getKeys()\n  }\n\n  async getAll(defaultValue: object): Promise<any> {\n    const value = await SharedPreferences.getAll()\n    if (!value) return defaultValue\n    return value\n  }\n}\n\nexport const sharedPreferences =\n  new SharedPreferencesImpl() as SharedPreferencesType\n"]}